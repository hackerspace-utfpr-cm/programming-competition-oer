\begin{frame}[parent={cmap:structural-software-testing},hasnext=true,hasprev=true]
\frametitle{Definition-use graph}
\label{concept:program-graph}
\label{concept:definition-use-graph}
\label{concept:dug}

\begin{block:concept}{Definição}
The Grafo Definição-Uso (DUG) é um programa gráfico adequado para representar o estado diferente de uma variável.
\end{block:concept}

\begin{block:fact}{Definition-use graph and gráfico de controle de fluxo}
\begin{itemize}
	\item The definition-use graph é uma extensão do gráfico de fluxo de controle;

	\item The definition-use graph inclui informações sobre as deifinições de variáveis, usos e destruições em cada nó:
	\begin{itemize}
		\item It contains all definition-use pairs for a program.
	\end{itemize}
\end{itemize}
\end{block:fact}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Elementos gráficos}
\label{concept:cfg-graph-elements}

\begin{block:fact}{Elementos gráficos}
\begin{itemize}
	\item Os nós de um gráfico do programa são blocos de código indivisíveis;

	\item As extremidades do gráfico de um programa representam a possível tranferência de execução entre os blocos de código;

	\item Há somente um nó de entrada, que corresponde ao bloco de código com a primeira instrução da unidade de programa;

	\item É possível ter muitos nós de saída, isto é, sem nós de um nó seguinte.
\end{itemize}
\end{block:fact}

\hfill
\refie{example:program-graph}{\beamerbutton{Example: Program graph}}
\refie{example:identifier-cfg}{\beamerbutton{Example: Control-flow graph for Identifier}}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Blocos de código}
\label{concept:statement}
\label{concept:statement-block}
\label{concept:code-block}

\begin{block:concept}{Definição}
O bloco de código de uma programa é a sequência consecutivas de instruções com um único ponto de entrada e um único ponto de saída.
\end{block:concept}

\begin{block:fact}{Fluxo de controle e blocos de código}
\begin{itemize}
	\item Controle sempre entra em um bloco de código no seu ponto de entrada e saí no seu ponto de saída;

	\item Não há a possibilidade de saída ou uma parada em qualqer ponto dentro de um bloco de código, exceto no seu ponto de saída. 
\end{itemize}
\end{block:fact}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Blocos de código}

\begin{block:fact}{Fluxo de controle e blocos de código}
\begin{itemize}
	\item Os pontos de entrada e saída de uma bloco de código coincidem quando o bloco de código contém apenas uma declaração;

	\item Chamadas de função são frequenetemente tratados como próprios blocos de código, porque causam o controle a ser transferido distante da função atualmente em execução e, consequentemente, aumentar a possibilidade de encerramento anormal do programa.
\end{itemize}
\end{block:fact}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Decisão}
\label{concept:definition}

\begin{block:concept}{Definição}
Uma decisão é uma instrução que causa um desvio no fluxo do programa.
\end{block:concept}

\begin{block:fact}{Instruções de decisão}
\begin{itemize}
	\item A transferência de execução entre os blocos de código é uma consequência das instruções de decisão;

	\item A marioria das linguagens de alto nível fornecem instruções, como \srccode{if},
	\srccode{while} and \srccode{switch}, para servir como contexto para as decisões.
\end{itemize}
\end{block:fact}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Definição de variáveis}
\label{concept:variable-definition}

\begin{block:concept}{Definição}
Uma definição de variável é a atribuição de um valor antes de uma variável ser utilizada.
\begin{itemize}
	\item A definição de variável ocorre quando um valor é armazenado em uma posição de memória.
\end{itemize}
\end{block:concept}
\end{frame}


\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Utilização de variável}
\label{concept:variable-use}

\begin{block:concept}{Definição}
A utilização de variável é quando a referência não é definida.
\end{block:concept}

\begin{block:fact}{Tipos de utilização de variável}
\begin{itemize}
	\item Há dois tipos de utilização de variável: uso computacional e uso predicativo:
	\begin{itemize}
		\item Uma variável de uso computacional (c-use) afeta diretamente o cálculo a ser efetuada ou permite que o resultado de uma definição de variável anterior seja observado;

		\item Uma variável de uso predicativo (p-use) afeta diretamente o fluxo de controle do produto em execução.
	\end{itemize}
\end{itemize}
\end{block:fact}
\end{frame}


\begin{frame}
\label{concept:dug-construction}
\frametitle{Definition-use graph}
\framesubtitle{Definition-use graph construction}

\begin{block:procedure}{DUG construction (1/2)}
\begin{enumerate}
	\item Considere um grafíco de controle de fluxo $G = (N, E)$ de um programa $P$, onde 
	$N$ é o conjunto de nós e $E$ o conjunto de extremidades. Cada nó em $G$ 
	corresponde a um bloco em $P$: aqueles blocos são denotados como 
	$b_1, b_2, ..., b_k$, addumindo que $P$ contém $k > 0$ blocos de código.

	\item Seja $def_i$ que indica o conjunto de variáveis definidas no bloco $i$.

	\item Seja $c-use_i$ que indica o conjunto de variáveis que tem um uso computacional no bloco $i$.

	\item Seja $p-use_i$ que indica o conjunto de variável que tem um uso predicativo no bloco $i$.
\end{enumerate}
\end{block:procedure}

\hfill
\refie{example:identifier-dug}{\beamerbutton{Example: Definition-use graph for Identifier}}
\end{frame}



\begin{frame}
\frametitle{Definition-use graph}
\framesubtitle{Definition-use graph construction}

\begin{block:procedure}{DUG construction (2/2)}
\begin{enumerate}
	\setcounter{enumi}{4}
	\item Computar $def_i$, $c-use_i$, e $p-use_i$ para cada código de bloco $i$ em $P$;

	\item Associar cada nó $i$ em $N$ com $def_i$, $c-use_i$, e $p-use_i$;

	\item Para cada nó $i$ que, como um conjunto de uso predicativo não vazio e termina na 
	condição $C$, associar as extremidades $(i, j)$ e $(i, k)$ com $C$ e $!C$,
	respectivamente, dado que a extremidade $(i, j)$ é tomado quando a condição é verdadeira
	e $(i, k)$ é tomado quando a condição é falsa.
\end{enumerate}
\end{block:procedure}

\hfill
\refie{example:identifier-dug}{\beamerbutton{Example: Definition-use graph for Identifier}}
\end{frame}