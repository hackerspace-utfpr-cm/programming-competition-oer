\begin{frame}
 \frametitle{Erros de formatação}
 Erros de formatação são muito comuns nas tentativa de submeter um algoritmo durante uma maratona de programação.
 
 Entende-se por erro de formatação quando um algoritmo não é aceito devido ao formato de saida adota pelo autor, não respeitando o formato exigido pelo problema.
 
 Consideraremos o seguinte exemplo, distância entre dois pontos, para as próximas explicações:
\end{frame}

\begin{frame} [fragile]
\frametitle{Erros de formatação}
\small Leia os quatro valores correspondentes aos eixos x e y de dois pontos quaisquer no plano, p1(x1,y1) e p2(x2,y2) e calcule a distância entre eles, mostrando 4 casas decimais após a vírgula.
  \begin{center}
\textbf{Entrada}
  \end{center}
\small O arquivo de entrada contém duas linhas de dados. Na primeira linha contém os valores inteiros: x1, y1 e na segunda linha contém os valores inteiros x2, y2.
  \begin{center}
\textbf{Saída}
  \end{center}
Calcule e imprima o valor da distância segundo a fórmula fornecida, com 4 casas após o ponto decimal.
  \begin{lstlisting}
    Exemplos de entrada
    1 7
    5 9

    Exemplo de saida
    4.4721
  \end{lstlisting}
\end{frame}

\begin{frame} [fragile]
 \frametitle{Erros de formatação}
 \begin{itemize}
  \item Caso o competidor não insira uma nova linha ao imprimir o resultado, o algoritmos será rejeitado ao ser submetido e será apresentado o seguinte erro: "Presentation error".
  \begin{lstlisting}[language=c]
while(scanf("%d %d %d %d", &x1, &y1, &x2, &y2) != EOF) {
  r = sqrt(pow((a2 - a1), 2) + pow((b2 - b1), 2));
  printf("%.4f", r);
}  
  \end{lstlisting}
  \begin{lstlisting}[language=c]
while(scanf("%d %d %d %d", &x1, &y1, &x2, &y2) != EOF) {
  r = sqrt(pow((a2 - a1), 2) + pow((b2 - b1), 2));
  printf("%.4f\n\n", r);
}  
  \end{lstlisting}
  Em ambos os casos, a implementação não será aceita devido a falta e ao excesso de uma nova linha, respectivamente.
 \end{itemize}
\end{frame}

\begin{frame} [fragile]
 \frametitle{Erros de formatação}
 \begin{itemize}
  \item {\small Por se tratar de uma variável de ponto flutuante, o enunciado exige que apresente 4 casas após a vírgula. Desta forma, se essa condição não for imposta no algoritmo, ele será rejeitado.}
  \begin{lstlisting}[language=c]
while(scanf("%d %d %d %d", &x1, &y1, &x2, &y2) != EOF) {
  r = sqrt(pow((a2 - a1), 2) + pow((b2 - b1), 2));
  printf("%f\n", r);
}
  \end{lstlisting}
  \begin{lstlisting}[language=c]
while(scanf("%d %d %d %d", &x1, &y1, &x2, &y2) != EOF) {
  r = sqrt(pow((a2 - a1), 2) + pow((b2 - b1), 2));
  printf("%.2f\n", r);
}
  \end{lstlisting}
  \small Esses dois exemplos estão incorretos, visto que o problema exige 4 casas após a vírgula. O primeiro não possui um número definido de casas e o segundo, apenas dois números após a vírgula.
 \end{itemize}
\end{frame}

\begin{frame} [fragile]
 \frametitle{Erros de formatação}
 \begin{itemize}
  \item Em alguns casos, o exercício informa quais serão as variáveis utilizadas. Neste exemplo, se utilizar quaquer outra variável sem ser, respectivamente, x1, x2, y1 e y2 a solução também não será aceita.
  \begin{lstlisting}[language=c]
int main () {
  int a1, b1, a2, b2;
  float r;

  while(scanf("%d %d %d %d", &a1, &b1, &a2, &b2) != EOF) {
    r = sqrt(pow((a2 - a1), 2) + pow((b2 - b1), 2));
    printf("%.4f", r);
  }
  return 0;
}
  \end{lstlisting}
  Como o problema exigia determinadas variáveis, essa implementação não será aceita por não utilizar as variáveis determinadas no enunciado do exercício: x1, y1, x2 e y2.
 \end{itemize}

\end{frame}
